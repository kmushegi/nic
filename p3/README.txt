Nature Inspired Computation
Project 3
Marcus Christiansen
Ernesto Garcia
Konstantine Mushegian
April 17, 2017

----------------------------------------

The final report is 'ant-colony-optimization.pdf'

----------------------------------------

The code in this repository contains an implemention of the ACO algorithm, with
two ant systems:
	* ACS - Ant Colony System
	* EAS - Elitist Ant System

----------------------------------------

Repository structure

(D) = Directory

p3
	* ALL_tsp(D)
		- all TSP problems distributed by Professor Majercik
	* sample-problems(D)
		- a subset of TSP problems selected for testing
	* sample-problems-2(D)
		- a smaller subset of TSP problems selected for testing
	* src(D)
		- ACORunner.java
			- point of entry into the program
		- ACO.java
			- handles all of ACO logic
		- Constants.java
			- defines string constants used across the program
		- Logger.java
			- provides methods for easy data output & error handling
		- Makefile
			- Makefile
		- Node.java
			- defines the Node class, used to store information about a 'city'
		- Utility.java
			- provides various utility functions used across the program
		- Visualizer.java
			- visualizes the results produced by the ACO implementation
	* stats(D)
		- files generated by auto-test.py
	* auto-test.py
		- automated testing utility
	* process-data.py
		- process data generated by auto-test.py
	* optimalTourLengths.txt
		- optimal tour length for each problem; used for benchmarking

----------------------------------------

The software allows and requires certain parameters for correct execution; the
format and ordering of parameters is specified below

**** Compile ****
$ javac -Werror -Xlint:-serial *.java

**** ACS ****
$ java ACORunner acs #ants #iters alpha beta rho problemFP stopCond secondsAllowed errAllowed eps qZero vis(1/0)

**** EAS ****
$ java ACORunner eas #ants #iters alpha beta rho problemFP stopCond secondsAllowed errAllowed e vis(1/0)

1. stopCond stands for Stop Condition
	* 0
		- stop after #iters reached
	* 1
		- stop after current error is <= errAllowed
	* 2
		- stop after secondsAllowed reached
	* 3
		- stop after either case 1 or case 2 are satisfied

***** Using the Makefile *****

You can use the included Makefile so that you don't have to keep running an extremely 
long command. You can change the parameters in the Makefile.

**** Compile ****
$ make

**** ACS ****
$ make acs

**** EAS ****
$ make eas

-----------------------------------------

Automated testing was done using the auto-test.py Python script which runs
all possible (well, as defined by us, the almighty creators) combinations of 
parameters on the problems located in sample-problems-2 directory.

The output will be written to the 'stats' folder. If you want to see any meaningful
data you will need to suppress 'user-friendly' prints in ACO.java (manually for now)
and use the function statsOutputSolution which will things you give it in a nice,
space-delimited way. Feel free to modify the function to suit youe needs.

Since some problems take a really long time to run, auto-test.py provides an option
to parallelize the execution according to the number of computing cores available
on the machine. The number of threads is arbitrary, but using the number of available
cores seemed optimal in terms of keeping the machine usable for other purposes.

To run the script, type

$ python auto-test.py acs/eas parallelize(1/0)

-----------------------------------------

Data analysis was done using the process-data.py; it reads the files in the $statsdir
folder and spits out the combination of parameters that produces the least average
error between our solution and the provided optimal solution.

$ python process-data.py

The .txt files will be read from the statsdir variable specified in process.data.py
on line 4.




